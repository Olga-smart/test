import BaseElement from './BaseElement/BaseElement';
import { PanelOptions } from './subviews/Panel/Panel';
import { IEventListener } from '../EventManager/EventManager';
declare type ViewOptions = {
    minMaxLabels?: boolean;
    valueLabels?: boolean;
    vertical?: boolean;
    range?: boolean;
    scale?: boolean;
    scaleIntervals?: number;
    panel?: boolean;
};
declare class View extends BaseElement<'div'> {
    private eventManager;
    private slider;
    private track;
    private range;
    private input;
    private thumbLeft;
    private thumbRight?;
    private scale?;
    private scaleIntervals;
    private minLabel?;
    private maxLabel?;
    private valueLabelLeft?;
    private valueLabelRight?;
    private valueLabelCommon?;
    private vertical?;
    private labelsContainer?;
    private panel?;
    constructor(component: HTMLDivElement, options?: ViewOptions);
    subscribe(listener: IEventListener): void;
    setMinValue(min: number): void;
    setMaxValue(max: number): void;
    setLeftValue(value: number, percent: number): void;
    setRightValue(value: number, percent: number): void;
    updateInput(value1: number, value2?: number | null): void;
    handleLeftInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    handleRightInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    addScale(min: number, max: number): void;
    removeScale(): void;
    getScaleIntervals(): number;
    handleScaleOrTrackClick(x: number, y: number): void;
    fixLabelsContainerWidthForVertical(): void;
    fixLabelsContainerHeightForHorizontal(): void;
    setPanelValues(options: PanelOptions): void;
    updatePanelFrom(value: number): void;
    updatePanelTo(value: number | ''): void;
    updatePanelScaleIntervals(value: number | ''): void;
    updatePanelStep(value: number): void;
    updatePanelMin(value: number): void;
    updatePanelMax(value: number): void;
    setLeftFromOutside(value: number): void;
    setRightFromOutside(value: number): void;
    setMinFromOutside(value: number): void;
    setMaxFromOutside(value: number): void;
    setStepFromOutside(value: number): void;
    toggleOrientationFromOutside(): void;
    toggleRangeFromOutside(): void;
    toggleScaleFromOutside(): void;
    setScaleIntervals(value: number): void;
    toggleValueLabels(): void;
    toggleMinMaxLabels(): void;
    hasLabels(): boolean;
    hasScale(): boolean;
    hasMinMaxLabels(): boolean;
    hasValueLabels(): boolean;
    hasPanel(): boolean;
    isRange(): boolean;
    isVertical(): boolean;
    getTrackWidth(): number;
    getTrackHeight(): number;
    private render;
    private destroy;
    private mergeLabels;
    private splitLabels;
    private isTwoLabelsClose;
    private isTwoValueLabelsClose;
    private isLeftValueLabelCloseToMinLabel;
    private isLeftValueLabelCloseToMaxLabel;
    private isRightValueLabelCloseToMaxLabel;
    private whichThumbIsNearer;
    private addSmoothTransition;
    private removeSmoothTransition;
    private collectLabels;
}
export default View;
//# sourceMappingURL=View.d.ts.map